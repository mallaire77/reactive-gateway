// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reactive-gateway.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Color;
@class Shape;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Opacity

typedef GPB_ENUM(Opacity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Opacity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Opacity_Transparent = 0,
  Opacity_MildlyOpaque = 1,
  Opacity_ModeratelyOpaque = 2,
  Opacity_MostlyOpaque = 3,
  Opacity_Opaque = 4,
};

GPBEnumDescriptor *Opacity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Opacity_IsValidValue(int32_t value);

#pragma mark - ReactiveGatewayRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ReactiveGatewayRoot : GPBRootObject
@end

#pragma mark - PrepareShapes

typedef GPB_ENUM(PrepareShapes_FieldNumber) {
  PrepareShapes_FieldNumber_NumberOfShapesToPrepare = 1,
};

@interface PrepareShapes : GPBMessage

@property(nonatomic, readwrite) uint32_t numberOfShapesToPrepare;

@end

#pragma mark - ShapeServiceResult

typedef GPB_ENUM(ShapeServiceResult_FieldNumber) {
  ShapeServiceResult_FieldNumber_Viable = 1,
  ShapeServiceResult_FieldNumber_Error = 2,
};

@interface ShapeServiceResult : GPBMessage

@property(nonatomic, readwrite) BOOL viable;

@property(nonatomic, readwrite, copy, null_resettable) NSString *error;

@end

#pragma mark - GetAShape

typedef GPB_ENUM(GetAShape_FieldNumber) {
  GetAShape_FieldNumber_Index = 1,
};

@interface GetAShape : GPBMessage

@property(nonatomic, readwrite) uint32_t index;

@end

#pragma mark - GetSomeShapes

typedef GPB_ENUM(GetSomeShapes_FieldNumber) {
  GetSomeShapes_FieldNumber_StartingIndex = 1,
  GetSomeShapes_FieldNumber_NumberOfShapes = 2,
};

@interface GetSomeShapes : GPBMessage

/** where to start in prepared shapes */
@property(nonatomic, readwrite) uint32_t startingIndex;

/** how many to fetch */
@property(nonatomic, readwrite) uint32_t numberOfShapes;

@end

#pragma mark - Color

typedef GPB_ENUM(Color_FieldNumber) {
  Color_FieldNumber_Red = 1,
  Color_FieldNumber_Green = 2,
  Color_FieldNumber_Blue = 3,
};

@interface Color : GPBMessage

@property(nonatomic, readwrite) int32_t red;

@property(nonatomic, readwrite) int32_t green;

@property(nonatomic, readwrite) int32_t blue;

@end

#pragma mark - Shape

typedef GPB_ENUM(Shape_FieldNumber) {
  Shape_FieldNumber_NumberOfSides = 1,
  Shape_FieldNumber_EdgeColor = 2,
  Shape_FieldNumber_FillColor = 3,
  Shape_FieldNumber_Opacity = 4,
  Shape_FieldNumber_Width = 5,
  Shape_FieldNumber_Height = 6,
  Shape_FieldNumber_Rotation = 7,
};

@interface Shape : GPBMessage

/** 0 = Circle, 1= line, 2 = vertex, 3 = triangle... */
@property(nonatomic, readwrite) uint32_t numberOfSides;

/** Color of the lines */
@property(nonatomic, readwrite, strong, null_resettable) Color *edgeColor;
/** Test to see if @c edgeColor has been set. */
@property(nonatomic, readwrite) BOOL hasEdgeColor;

/** Color of the fill */
@property(nonatomic, readwrite, strong, null_resettable) Color *fillColor;
/** Test to see if @c fillColor has been set. */
@property(nonatomic, readwrite) BOOL hasFillColor;

/** Opacity of filled region */
@property(nonatomic, readwrite) Opacity opacity;

/** width of bounding box */
@property(nonatomic, readwrite) uint32_t width;

/** height of bounding box */
@property(nonatomic, readwrite) uint32_t height;

/** angle of rotation in radians */
@property(nonatomic, readwrite) float rotation;

@end

/**
 * Fetches the raw value of a @c Shape's @c opacity property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Shape_Opacity_RawValue(Shape *message);
/**
 * Sets the raw value of an @c Shape's @c opacity property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetShape_Opacity_RawValue(Shape *message, int32_t value);

#pragma mark - GetSomeTetrisShapes

typedef GPB_ENUM(GetSomeTetrisShapes_FieldNumber) {
  GetSomeTetrisShapes_FieldNumber_StartingIndex = 1,
  GetSomeTetrisShapes_FieldNumber_NumberOfShapes = 2,
  GetSomeTetrisShapes_FieldNumber_DropSpotsArray = 3,
};

@interface GetSomeTetrisShapes : GPBMessage

/** where to start in prepared shapes */
@property(nonatomic, readwrite) uint32_t startingIndex;

/** how many to fetch */
@property(nonatomic, readwrite) uint32_t numberOfShapes;

/** x-axis positions to drop them at */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *dropSpotsArray;
/** The number of items in @c dropSpotsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dropSpotsArray_Count;

@end

#pragma mark - TetrisShape

typedef GPB_ENUM(TetrisShape_FieldNumber) {
  TetrisShape_FieldNumber_Shape = 1,
  TetrisShape_FieldNumber_DropSpot = 2,
  TetrisShape_FieldNumber_Animate = 3,
};

@interface TetrisShape : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Shape *shape;
/** Test to see if @c shape has been set. */
@property(nonatomic, readwrite) BOOL hasShape;

@property(nonatomic, readwrite) uint32_t dropSpot;

@property(nonatomic, readwrite) BOOL animate;

@end

#pragma mark - ReleaseShapes

@interface ReleaseShapes : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
